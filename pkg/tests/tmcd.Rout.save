
R : Copyright 2006, The R Foundation for Statistical Computing
Version 2.3.1 RC (2006-05-31 r38242)
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(robustbase)
Loading required package: MASS
> library(MASS)
> 
> dodata <- function(nrep = 1, time = FALSE, short = FALSE, full = TRUE,
+                    method = c("FASTMCD","MASS")) {
+     ##@bdescr
+     ## Test the function covMcd() on the literature datasets:
+     ##
+     ## Call covMcd() for all regression datasets available in robustbase and print:
+     ##  - execution time (if time == TRUE)
+     ##  - objective fucntion
+     ##  - best subsample found (if short == false)
+     ##  - outliers identified (with cutoff 0.975) (if short == false)
+     ##  - estimated center and covariance matrix if full == TRUE)
+     ##
+     ##@edescr
+     ##
+     ##@in  nrep              : [integer] number of repetitions to use for estimating the
+     ##                                   (average) execution time
+     ##@in  time              : [boolean] whether to evaluate the execution time
+     ##@in  short             : [boolean] whether to do short output (i.e. only the
+     ##                                   objective function value). If short == FALSE,
+     ##                                   the best subsample and the identified outliers are
+     ##                                   printed. See also the parameter full below
+     ##@in  full              : [boolean] whether to print the estimated cente and covariance matrix
+     ##@in  method            : [character] select a method: one of (FASTMCD, MASS)
+ 
+     domcd <- function(x, xname, nrep = 1) {
+         n <- dim(x)[1]
+         p <- dim(x)[2]
+         if(method == "MASS") {
+             mcd <- cov.mcd(x)
+             quan <- as.integer(floor((n + p + 1)/2)) #default: floor((n+p+1)/2)
+         }
+         else {
+             mcd <- covMcd(x) # trace = FALSE
+             quan <- as.integer(mcd$quan)
+         }
+ 
+         if(method == "MASS")
+             crit <- mcd$crit
+         else
+             crit <- log(mcd$crit)
+ 
+         if(time) {
+             xtime <- system.time(dorep(x, nrep, method))[1]/nrep
+             xres <- sprintf("%3d %3d %3d %12.6f %10.3f\n",
+                             dim(x)[1], dim(x)[2], quan, crit, xtime)
+         }
+         else {
+             xres <- sprintf("%3d %3d %3d %12.6f\n", dim(x)[1], dim(x)[2], quan, crit)
+         }
+         lpad <- lname-nchar(xname)
+         cat(pad.right(xname,lpad), xres)
+ 
+         if(!short) {
+             cat("Best subsample: \n")
+             print(mcd$best)
+ 
+             ibad <- which(mcd$mcd.wt == 0)
+             names(ibad) <- NULL
+             nbad <- length(ibad)
+             cat("Outliers: ",nbad,"\n")
+             if(nbad > 0)
+                 print(ibad)
+             if(full) {
+                 cat("-------------\n")
+                 print(mcd)
+             }
+             cat("--------------------------------------------------------\n")
+         }
+     }
+ 
+     lname <- 20
+     method <- match.arg(method)
+ 
+     data(heart)
+     data(starsCYG)
+     data(phosphor)
+     data(stackloss)
+     data(coleman)
+     data(salinity)
+     data(wood)
+     data(hbk)
+ 
+     data(Animals, package = "MASS")
+     brain <- Animals[c(1:24, 26:25, 27:28),]
+     data(milk)
+     data(bushfire)
+ 
+     ##    data(x1000)
+     ##    data(x5000)
+ 
+     tmp <- sys.call()
+     cat("\nCall: ", deparse(substitute(tmp)),"\n")
+ 
+     cat("Data Set               n   p  Half LOG(obj)        Time\n")
+     cat("========================================================\n")
+     domcd(heart[, 1:2], data(heart), nrep)
+     domcd(starsCYG, data(starsCYG), nrep)
+     domcd(data.matrix(subset(phosphor, select = -plant)),
+           data(phosphor), nrep)
+     domcd(stack.x, data(stackloss), nrep)
+     domcd(data.matrix(subset(coleman, select = -Y)), data(coleman), nrep)
+     domcd(data.matrix(subset(salinity, select = -Y)), data(salinity), nrep)
+     domcd(data.matrix(subset(wood, select = -y)), data(wood), nrep)
+     domcd(data.matrix(subset(hbk,  select = -Y)), data(hbk), nrep)
+ 
+ 
+     domcd(brain, "Animals", nrep)
+     domcd(milk, data(milk), nrep)
+     domcd(bushfire, data(bushfire), nrep)
+     cat("========================================================\n")
+     ##    domcd(x1000$X,data(x1000), nrep)
+     ##    domcd(x5000$X,data(x5000), nrep)
+ }
> 
> dogen <- function(nrep = 1, eps = 0.49, method = c("FASTMCD", "MASS")) {
+ 
+     domcd <- function(x, nrep = 1) {
+         gc()
+         xtime <- system.time(dorep(x, nrep, method))[1]/nrep
+         cat(sprintf("%6d %3d %10.2f\n", dim(x)[1], dim(x)[2], xtime))
+         xtime
+     }
+ 
+     set.seed(1234)
+ 
+     method <- match.arg(method)
+ 
+     ap <- c(2, 5, 10, 20, 30)
+     an <- c(100, 500, 1000, 10000, 50000)
+ 
+     tottime <- 0
+     cat("     n   p       Time\n")
+     cat("=====================\n")
+     for(i in 1:length(an)) {
+         for(j in 1:length(ap)) {
+             n <- an[i]
+             p <- ap[j]
+             if(5*p <= n) {
+                 xx <- gendata(n, p, eps)
+                 X <- xx$X
+                 tottime <- tottime + domcd(X, nrep)
+             }
+         }
+     }
+ 
+     cat("=====================\n")
+     cat("Total time: ", tottime*nrep, "\n")
+ }
> 
> docheck <- function(n, p, eps) {
+     xx <- gendata(n,p,eps)
+     mcd <- covMcd(xx$X)
+     check(mcd, xx$xind)
+ }
> 
> check <- function(mcd, xind) {
+ ##  check if mcd is robust w.r.t xind, i.e. check how many of xind
+ ##  did not get zero weight
+     mymatch <- xind %in% which(mcd$mcd.wt == 0)
+     length(xind) - length(which(mymatch))
+ }
> 
> dorep <- function(x, nrep = 1, method = c("FASTMCD","MASS")) {
+ 
+     method <- match.arg(method)
+     for(i in 1:nrep)
+     if(method == "MASS")
+         cov.mcd(x)
+     else
+         covMcd(x)
+ }
> 
> #### gendata() ####
> ## Generates a location contaminated multivariate
> ## normal sample of n observations in p dimensions
> ##    (1-eps)*Np(0,Ip) + eps*Np(m,Ip)
> ## where
> ##    m = (b,b,...,b)
> ## Defaults: eps=0 and b=10
> ##
> gendata <- function(n,p,eps = 0,b = 10) {
+ 
+     if(missing(n) || missing(p))
+         stop("Please specify (n,p)")
+     if(eps < 0 || eps >= 0.5)
+         stop(message = "eps must be in [0,0.5)")
+     X <- mvrnorm(n,rep(0,p),diag(1,nrow = p,ncol = p))
+     nbad <- as.integer(eps * n)
+     if(nbad > 0) {
+         Xbad <- mvrnorm(nbad,rep(b,p),diag(1,nrow = p,ncol = p))
+         xind <- sample(n,nbad)
+         X[xind,] <- Xbad
+     }
+     list(X = X, xind = xind)
+ }
> 
> pad.right <- function(z, pads)
+ {
+     ## Pads spaces to right of text
+     padding <- paste(rep(" ", pads), collapse = "")
+     paste(z, padding, sep = "")
+ }
> 
> 
> ## -- now do it:
> set.seed(101) # <<-- sub-sampling algorithm now based on R's RNG and seed
> dodata()

Call:  dodata() 
Data Set               n   p  Half LOG(obj)        Time
========================================================
heart                 12   2   7     5.678742
Best subsample: 
[1]  1  3  4  5  7  9 11
Outliers:  0 
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  5.679 
Robust Estimate of Location:
height  weight  
 38.25   33.09  
Robust Estimate of Covariance:
        height  weight
height   173.1   332.8
weight   332.8   726.1
--------------------------------------------------------
starsCYG              47   2  25    -8.031215
Best subsample: 
 [1]  1  2  4  6  8 10 12 13 16 24 25 26 28 32 33 37 38 39 40 41 42 43 44 45 46
Outliers:  6 
[1]  7 11 14 20 30 34
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  -8.031 
Robust Estimate of Location:
   log.Te  log.light  
    4.409      4.949  
Robust Estimate of Covariance:
            log.Te  log.light
log.Te     0.01754    0.05234
log.light  0.05234    0.36434
--------------------------------------------------------
phosphor              18   2  10     6.878847
Best subsample: 
 [1]  3  5  8  9 11 12 13 14 15 17
Outliers:  2 
[1] 1 6
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  6.879 
Robust Estimate of Location:
  inorg  organic  
  13.35    38.80  
Robust Estimate of Covariance:
         inorg  organic
inorg    194.3    197.0
organic  197.0    274.4
--------------------------------------------------------
stackloss             21   3  12     5.472581
Best subsample: 
 [1]  4  5  6  7  8  9 10 11 12 13 14 20
Outliers:  9 
[1]  1  2  3 15 16 17 18 19 21
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  5.473 
Robust Estimate of Location:
  Air.Flow  Water.Temp  Acid.Conc.  
     59.50       20.83       87.33  
Robust Estimate of Covariance:
            Air.Flow  Water.Temp  Acid.Conc.
Air.Flow       13.75       12.78       12.54
Water.Temp     12.78       20.18       13.42
Acid.Conc.     12.54       13.42       50.81
--------------------------------------------------------
coleman               20   5  13     1.286808
Best subsample: 
 [1]  2  3  4  5  7  8 12 13 14 16 17 19 20
Outliers:  7 
[1]  1  6  9 10 11 15 18
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  1.287 
Robust Estimate of Location:
  salaryP   fatherWc    sstatus  teacherSc  motherLev  
    2.757     48.379      6.118     25.005      6.398  
Robust Estimate of Covariance:
           salaryP  fatherWc   sstatus  teacherSc  motherLev
salaryP     0.4125     2.909   -0.4338     0.2466     0.1222
fatherWc    2.9089  2122.755  538.2630    20.5270    56.1936
sstatus    -0.4338   538.263  195.2556     6.2423    16.4991
teacherSc   0.2466    20.527    6.2423     1.2787     0.9043
motherLev   0.1222    56.194   16.4991     0.9043     1.6980
--------------------------------------------------------
salinity              28   3  16     1.326364
Best subsample: 
 [1]  1  2  6  7  8 12 13 14 18 20 21 22 25 26 27 28
Outliers:  4 
[1]  5 16 23 24
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  1.326 
Robust Estimate of Location:
    X1      X2      X3  
10.083   2.783  22.778  
Robust Estimate of Covariance:
        X1      X2      X3
X1  14.503   1.400  -4.428
X2   1.400   5.329  -2.002
X3  -4.428  -2.002   3.319
--------------------------------------------------------
wood                  20   5  13   -36.270094
Best subsample: 
 [1]  1  2  3  5  9 10 12 13 14 15 17 18 20
Outliers:  5 
[1]  4  6  8 11 19
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  -36.27 
Robust Estimate of Location:
    x1      x2      x3      x4      x5  
0.5869  0.1222  0.5309  0.5382  0.8918  
Robust Estimate of Covariance:
            x1          x2          x3          x4          x5
x1   0.0163266   3.063e-03   0.0051357  -9.543e-04  -2.654e-03
x2   0.0030632   7.894e-04   0.0020670  -8.467e-05   3.851e-05
x3   0.0051357   2.067e-03   0.0108015  -1.419e-03   5.739e-04
x4  -0.0009543  -8.467e-05  -0.0014190   4.635e-03   2.977e-03
x5  -0.0026545   3.851e-05   0.0005739   2.977e-03   4.506e-03
--------------------------------------------------------
hbk                   75   3  39    -1.047858
Best subsample: 
 [1] 15 16 17 18 19 20 21 22 23 24 26 27 31 32 33 35 36 37 38 40 43 49 50 51 54
[26] 55 56 58 59 61 63 64 66 67 70 71 72 73 74
Outliers:  14 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  -1.048 
Robust Estimate of Location:
   X1     X2     X3  
1.538  1.780  1.687  
Robust Estimate of Covariance:
         X1       X2      X3
X1  1.68030  0.07533  0.1742
X2  0.07533  1.71031  0.2089
X3  0.17416  0.20890  1.5884
--------------------------------------------------------
Animals               28   2  15    14.555543
Best subsample: 
 [1]  1  3  4  5 10 11 17 18 19 20 21 22 23 26 27
Outliers:  13 
 [1]  2  6  7  8  9 12 13 14 15 16 24 25 28
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  14.56 
Robust Estimate of Location:
 body  brain  
18.67  64.94  
Robust Estimate of Covariance:
       body  brain
body   2690   4562
brain  4562  16346
--------------------------------------------------------
milk                  86   8  47   -28.848323
Best subsample: 
 [1]  5  7  8  9 10 21 22 24 26 30 31 32 33 34 35 36 39 45 46 51 53 54 55 56 57
[26] 58 59 60 61 62 63 64 65 66 67 68 69 71 72 76 78 79 81 82 83 84 86
Outliers:  20 
 [1]  1  2  3 11 12 13 14 15 16 17 18 20 27 41 44 47 70 74 75 77
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  -28.85 
Robust Estimate of Location:
     X1       X2       X3       X4       X5       X6       X7       X8  
  1.030   35.885   33.076   26.140   25.121   25.052  123.166   14.382  
Robust Estimate of Covariance:
           X1         X2         X3         X4         X5         X6         X7
X1  5.244e-07  0.0001429  0.0001814  0.0001779  0.0001585  0.0001374  0.0007119
X2  1.429e-04  2.3117741  0.2880534  0.2280272  0.1251295  0.2915536  2.0445205
X3  1.814e-04  0.2880534  1.3600390  1.0078726  0.9937268  0.9841859  0.8510427
X4  1.779e-04  0.2280272  1.0078726  0.8087730  0.7728411  0.7582802  0.7090137
X5  1.585e-04  0.1251295  0.9937268  0.7728411  0.8194833  0.7743836  0.6901070
X6  1.374e-04  0.2915536  0.9841859  0.7582802  0.7743836  0.7862365  0.7341326
X7  7.119e-04  2.0445205  0.8510427  0.7090137  0.6901070  0.7341326  4.8640606
X8  1.704e-05  0.2654868  0.2308933  0.1579462  0.1313123  0.1497227  0.4449118
           X8
X1  1.704e-05
X2  2.655e-01
X3  2.309e-01
X4  1.579e-01
X5  1.313e-01
X6  1.497e-01
X7  4.449e-01
X8  1.891e-01
--------------------------------------------------------
bushfire              38   5  22    18.135810
Best subsample: 
 [1]  1  2  3  4  5  6 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
Outliers:  16 
 [1]  7  8  9 10 11 12 29 30 31 32 33 34 35 36 37 38
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  18.14 
Robust Estimate of Location:
   V1     V2     V3     V4     V5  
105.5  146.9  274.4  217.5  279.0  
Robust Estimate of Covariance:
         V1       V2     V3      V4      V5
V1    593.7    459.4  -2903  -653.2  -532.8
V2    459.4    405.4  -1930  -394.3  -333.3
V3  -2903.2  -1930.2  17147  4212.9  3347.9
V4   -653.2   -394.3   4213  1109.7   866.7
V5   -532.8   -333.3   3348   866.7   682.6
--------------------------------------------------------
========================================================
> 
> cat('Time elapsed: ', proc.time(),'\n') # for ``statistical reasons''
Time elapsed:  1.384 0.04 1.407 0 0 
> 
